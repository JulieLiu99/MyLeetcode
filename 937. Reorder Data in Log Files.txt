class Solution:
    def reorderLogFiles(self, logs: List[str]) -> List[str]:
        
        """
        Custom sorting comparison
        
        O(nlogn * m) time complexity where n is the number of strings and m is the max length of the strings. 
        The .split() function operates with O(m) time within each string. 
        The sorting function operates with O(nlogn) time for the strings.

        O(mlogn) space complexity where n is the number of strings and m is the max length of the strings. 
        The built in python sorting algorithm uses log(n) space, holding onto the split logs uses up O(m) space for each sorting step.
        
        """
        
        def sorting_algorithm(log):
            # Is a numerical log, make sure these entries appear on the right side without further sorting.
            if log[-1].isnumeric():
                # A tuple of one element. One element tuples need a trailing comma so they are not confused with a simple one (1) or 1 by python.
                return (1,)

            # Is an alphabetical log, use 0 so they are always to the left of the numerical logs, 
            # then use the more complex sorting rules for just the alphabetical logs.
            left_side, right_side = log.split(" ", 1)
            return (0, right_side, left_side)

		# Sort the logs according to the function we defined.
        return sorted(logs, key=sorting_algorithm)